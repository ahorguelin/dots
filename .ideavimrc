set scrolloff=8

set incsearch

map Q gq

"""""""""""""""""""""""	PLUGINS """""""""""""""""""""""

" Highlight copied text
Plug 'machakann/vim-highlightedyank'
" Commentary plugin
Plug 'tpope/vim-commentary'
" NERDTree
Plug 'preservim/nerdtree'

"""""""""""""""""""""""	PERSONAL CONFIG """""""""""""""""""""""
set NERDTree
let mapleader = " "
set syntax
set nocompatible
set ignorecase
set smartcase
set number relativenumber

map <leader>v <C-w>v
map <C-h> <C-w>h
map <C-l> <C-w>l
" Zoom on a split editor
map <leader>z <Action>(MaximizeEditorInSplit)

set clipboard^=unnamed,unnamedplus

map <C-[> gT
map <C-]> gt

map <C-d> <C-d>zz
map <C-u> <C-u>zz

map } }zz
map { {zz
cnoremap <C-v> <C-r>"

"""""""""""""""""""""""	Intellij actions """""""""""""""""""""""
" navigation
nmap <C-p> <Action>(GotoFile)
nmap <C-j> <Action>(GotoClass)
nmap <leader>q <Action>(CloseAllEditorsButActive)
nmap <leader>Q <Action>(CloseAllEditors)
nmap <esc> <Action>(HideAllWindows)
" ideavimrc
map <leader>si :source ~/.ideavimrc<CR>

" linters
vnoremap /= ReformatCode

" intellisense & shit
map <leader>gi <Action>(FindUsages)
map <leader>gd <Action>(QuickImplementations)
nmap <leader>gr <Action>(FindInPath)
vmap <leader>gr <Action>(FindSelectionInPath)
map <leader>p <Action>(ParameterInfo)
map <leader>ge <Action>(ShowErrorDescription)

" debugging
map <leader>B <Action>(Debugger.RemoveAllBreakpoints)
map <leader>b <Action>(ToggleLineBreakpoint)
map <leader>mb <Action>(ToggleMethodBreakpoint)

" popups
map <leader>cr <Action>(Refactorings.QuickListPopupAction)
map <leader>cg <Action>(Generate)

" Bookmarks
map <leader>a <Action>(HarpoonerAddFile)
map <leader>h <Action>(HarpoonerQuickMenu)
map <leader>1 <Action>(HarpoonerOpenFile0)
map <leader>2 <Action>(HarpoonerOpenFile1)
map <leader>3 <Action>(HarpoonerOpenFile2)
map <leader>4 <Action>(HarpoonerOpenFile3)
map <leader>5 <Action>(HarpoonerOpenFile4)
